{"version":3,"sources":["components/FormItem.js","components/GpaForm.js","App.js","serviceWorker.js","index.js"],"names":["FormItem","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","updateGradePoints","event","setState","gradePoints","target","value","updateUnits","units","Number","data","state","sendGradePoints","react_default","a","createElement","className","onChange","name","type","min","React","Component","GpaForm","addNewCourse","index","formItems","length","getData","newGradeArray","toConsumableArray","gradeArray","newElement","components_FormItem","concat","objectSpread","calcGPA","totalGradePoints","totalUnits","forEach","element","toFixed","onClick","App","components_GpaForm","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.d2c1c1b3.chunk.js","sourcesContent":["import React from 'react'\r\n\r\n\r\nclass FormItem extends React.Component{\r\n    constructor(props){\r\n        super(props)\r\n        this.state={\r\n            gradePoints:'4',\r\n            units:0\r\n        }\r\n    }\r\n    updateGradePoints = (event)=> {\r\n        this.setState({gradePoints:event.target.value},()=>{\r\n            this.gradePoints()\r\n        });\r\n        \r\n\r\n    }\r\n    updateUnits = (event)=>{\r\n        this.setState({units:Number(event.target.value)},()=>{\r\n            this.gradePoints()\r\n        });\r\n    }\r\n    gradePoints = ()=>{\r\n        let data = {\r\n            gradePoints:this.state.gradePoints,\r\n            units:this.state.units\r\n        }\r\n        this.props.sendGradePoints(data)\r\n    }\r\n    render(){\r\n        return(\r\n            <div className=\"row  form-group\">\r\n                <div className=\"col\">\r\n                    <input className=\"form-control\" />\r\n                </div>\r\n            \r\n                <span className=\"col\">\r\n                    <select  onChange={this.updateGradePoints} className=\"form-control\" name=\"Grades\">\r\n                        <option value=\"4.0\">A+</option>\r\n                        <option value=\"4.0\">A</option>\r\n                        <option value=\"3.7\">A-</option>\r\n                        <option value=\"3.3\">B+</option>\r\n                        <option value=\"3.0\">B</option>\r\n                        <option value=\"2.7\">B-</option>\r\n                        <option value=\"2.3\">C+</option>\r\n                        <option value=\"2.0\">C</option>\r\n                        <option value=\"1.7\">C-</option>\r\n                        <option value=\"1.3\">D+</option>\r\n                        <option value=\"1.0\">D</option>\r\n                        <option value=\"0.7\">D-</option>\r\n                        <option value=\"0.0\">F</option>\r\n                    </select>\r\n                </span>\r\n                <div className=\"col\">\r\n                    <input name=\"units\" onChange={this.updateUnits} className=\"form-control\" type=\"number\" min=\"0\" />\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\nexport default FormItem;","import React from 'react'\r\nimport FormItem from './FormItem'\r\n// import { stat } from 'fs';\r\nclass GpaForm extends React.Component{\r\n    constructor(props){\r\n        super(props)\r\n        this.state={\r\n            gradeArray:[],\r\n            formItems:[]\r\n        }\r\n    }\r\n    \r\n    addNewCourse = ()=>{\r\n        let index = this.state.formItems.length \r\n            let getData = (data)=>{\r\n                let newGradeArray = [...this.state.gradeArray]\r\n                newGradeArray[index] = data\r\n                this.setState({\r\n                    gradeArray:newGradeArray\r\n                })\r\n            }\r\n        this.setState((state)=>{\r\n            let newElement = <FormItem sendGradePoints={getData} />  \r\n            let formItems= [...this.state.formItems,newElement]\r\n            return{\r\n                ...state,formItems\r\n            }\r\n        })\r\n    }\r\n    calcGPA = ()=>{\r\n        let totalGradePoints = 0;\r\n        let totalUnits = 0\r\n        this.state.gradeArray.forEach(element => {\r\n            if(element){\r\n            totalGradePoints += element.gradePoints* element.units\r\n            totalUnits += element.units\r\n            }\r\n            \r\n        });\r\n        return totalUnits ? (totalGradePoints / totalUnits).toFixed(2) : 0.00\r\n    }\r\n    componentDidMount() {\r\n        this.addNewCourse()\r\n    }\r\n    render(){\r\n        return (\r\n            <div className=\"row gpa-form\">\r\n                <div className=\"col-12\">\r\n                    \r\n                    <div className=\"row\">\r\n                        <span className=\"col\">Course</span>\r\n                        <span className=\"col\">Grades</span>\r\n                        <span className=\"col\">Units</span>\r\n                    </div>\r\n                </div>\r\n            <form className=\"col-12 \">\r\n            {this.state.formItems}\r\n\r\n            </form>\r\n            <button className=\"btn badge-primary mr-auto ml-auto mb-3\" onClick={this.addNewCourse} >Add new course</button>\r\n            <div className=\"col-12 h1\">Gpa: {this.calcGPA()}</div>\r\n            </div>\r\n        )\r\n    }\r\n\r\n}\r\nexport default GpaForm;","import React from 'react';\r\nimport './App.css';\r\nimport GpaForm from './components/GpaForm'\r\n\r\nfunction App() {\r\n\treturn (\r\n\t\t<div className=\"App\">\r\n\t\t\t<div className=\"container\">\r\n\t\t\t\t<GpaForm/>\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t);\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}